* flask
** example1
查看example1.py
** 模板渲染
*** render_template函数
函数把Jinja2模板引擎集成到了程序中。render_template函数的第一个参数是模板的文件名。
随后的参数都是键值对，表示模板中变量对应的真实值。在这段代码中，第二个模板收到一个名为name的变量。
*** example1
#+BEGIN_SRC python
  #默认情况下，Flask在程序文件夹中的templates子文件夹中寻找模板
  from flask import render_template
  @app.route('/')
  def index():
      return render_template("xx.html")


  @app.route('/')
  def user('/user/<name>')
  def user(name):
      return render_template('user.html', name=name)

#+END_SRC

#+BEGIN_SRC html
  <h1>{{ name }}</h1>

#+END_SRC
*** {{ name}}
{{ name }} 结构表示一个变量，特殊的占位符，告诉模板引擎这个位置的值从渲染模板时使用的数据中获取
*** jinjia2 常用过滤器
<h1>hello, {{ name|capitalize }}
| safe       | 渲染时值不转义   |
| capitalize | 首字母大些       |
| lower      | 小写             |
| upper      | 大些             |
| title      | 单词的首字母大写 |
| trim       | 值的首尾空格去掉 |
| striptags  | 删掉html标签     |

*** 控制结构
1. {% if %}{% else %}{% endif %}
2. {% for %}{% endfor %}
3. 
** flask-script
- 安装：pip install flask-script
- 初始化： from flask.ext.script import Manager
  manager = Manager(app)

** 集成flask-bootstrap
- 安装：pip install flask-bootstrap
- 初始化：from flask.ext.bootstrap import Bootstrap
  bootstrap = Bootstrap(app)
** 自定义错误页面
#+BEGIN_SRC python
@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


@app.errorhandler(500)
def internal_server_error(e):
    return render_template('500.html'), 500


#+END_SRC
** url_for 函数: 生成链接， 动态路由的链接
- 最简单的用法： 以视图函数名作为参数，返回对应的url
- 生成动态url地址： 将动态部分作为关键字参数传入。
- 参数： _external=True, 加上这个参数则生成绝对路径
** 静态文件
** flask-wtf
| stringfield        | 文本字段            |
| TextAreaField      | 多行文本            |
| PasswordField      | 密码文本            |
| HiddenField        | 隐藏文本            |
| DateField          | datetime字段        |
| DatetimeField      | datime              |
| IntergerField      | 整数                |
| FloadtField        | 浮点数              |
| BooleanField       | 复选框， True False |
| RadioField         | 单选框              |
| SelectField        | 下拉                |
| SelectMutipleField | 下拉列表，多选      |
| FielField          | 文件上传            |
| SubmitField        | 表单提交            |
| FormField          | 表单嵌入另一个表单  |
| FIeldList          | 一组制定类型到字段  |


- validators 参数制定一个又验证函数组成到列表，在接受用户提哦叫到数据之前
验证数据。
- flask内建的验证函数
| Emai        | 验证邮件地址               |
| EqualTo     | 比较值，常用于输入两次密码 |
| IPAddress   | 验证ip4网络地址            |
| Length      | 验证长度                   |
| NumberRange | 验证是否在数字范围内       |
| Optional    | 无输入值时跳过其他验证函数 |
| Required    | 不为空                     |
| Regexp      | 使用正则表达式验证输入值   |
| URL         | 使用正则表达式验证输入值   |
| AnyOf       | 确保输入值在可选列表中     |
| NoneOf      | 不在可选列表中             |

- 表单渲染成HTMl
** 重定向和回话
- 重定向是一种特殊的响应，响应内容使URL， 而不是包含HTML代码的字符串。浏览器接受到这种响应时，
会向重定向到URL发起GET请求，显示页面到内容。

- 程序可以把数据存储在session中，在请求之间“记住”数据。用户会话是一种私有存储，存在每个连接到服务器的
客户端中。
** Flash 消息
请求完成后，有时需要让用户知道状态发生了变化。这里可以使用确认消息，警告或者错误提醒。这种功能使Flask的核心特性
。flash()函数可以实现这种效果。 
** flask-sqlalchemy
flask-sqlalchemy扩展，数据库使用url指定
| 数据库引擎 | URL                                         |
| Mysql      | mysql://username:password@hostname/database |
| sqlite     | sqlite:////absolute/path/to/database        |


